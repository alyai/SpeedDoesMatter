#pragma checksum "/Users/omega/Documents/GitHub/SpeedDoesMatter/SpeedDoesMatter/Views/Home/AboutPagespeed.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "731789f2715da91e89cca059e87b31a8fe2409d1"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_AboutPagespeed), @"mvc.1.0.view", @"/Views/Home/AboutPagespeed.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Users/omega/Documents/GitHub/SpeedDoesMatter/SpeedDoesMatter/Views/_ViewImports.cshtml"
using SpeedDoesMatter;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/omega/Documents/GitHub/SpeedDoesMatter/SpeedDoesMatter/Views/_ViewImports.cshtml"
using SpeedDoesMatter.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/omega/Documents/GitHub/SpeedDoesMatter/SpeedDoesMatter/Views/_ViewImports.cshtml"
using SpeedDoesMatter.Models.PageSpeedTest;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"731789f2715da91e89cca059e87b31a8fe2409d1", @"/Views/Home/AboutPagespeed.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ee2d7d04fac82f09bae9f773886e37c61f8045d5", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_AboutPagespeed : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/bootstrap/dist/css/bootstrap.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/bootstrap/dist/css/bootstrap.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery/dist/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", "~/js/site.js", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("text-center"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("text-align: left !important; padding-bottom: 1050px;"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "/Users/omega/Documents/GitHub/SpeedDoesMatter/SpeedDoesMatter/Views/Home/AboutPagespeed.cshtml"
  
    ViewData["Title"] = "About Pagespeed";

#line default
#line hidden
#nullable disable
            WriteLiteral("<h1>");
#nullable restore
#line 4 "/Users/omega/Documents/GitHub/SpeedDoesMatter/SpeedDoesMatter/Views/Home/AboutPagespeed.cshtml"
Write(ViewData["Title"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(" </h1>\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "731789f2715da91e89cca059e87b31a8fe2409d17120", async() => {
                WriteLiteral("\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "731789f2715da91e89cca059e87b31a8fe2409d17498", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    <!-- Bootstrap core CSS -->\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "731789f2715da91e89cca059e87b31a8fe2409d18696", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "731789f2715da91e89cca059e87b31a8fe2409d19860", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "731789f2715da91e89cca059e87b31a8fe2409d110945", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "731789f2715da91e89cca059e87b31a8fe2409d112031", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper.Src = (string)__tagHelperAttribute_5.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
#nullable restore
#line 17 "/Users/omega/Documents/GitHub/SpeedDoesMatter/SpeedDoesMatter/Views/Home/AboutPagespeed.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper.AppendVersion = true;

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-append-version", __Microsoft_AspNetCore_Mvc_TagHelpers_ScriptTagHelper.AppendVersion, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "731789f2715da91e89cca059e87b31a8fe2409d114676", async() => {
                WriteLiteral(@"

    <header>
        <p>
            PageSpeed Insights (PSI) reports on the performance of a page on both mobile and desktop
            devices, and provides suggestions on how that page may be improved.
        </p>
        <p>
            PSI provides both lab and field data about a page. Lab data is useful for debugging
            performance issues, as it is collected in a controlled environment. However, it may not
            capture real-world bottlenecks. Field data is useful for capturing true, real-world user
            experience - but has a more limited set of metrics. See
            <a href=""/web/fundamentals/performance/speed-tools"">
                How To Think
                About Speed Tools
            </a>
            for more information on the 2 types of data.
        </p>


        <h2 id=""score"" data-text=""Performance score"" tabindex=""0"">Performance score</h2>
        <p>
            At the top of the report, PSI provides a score which summarizes the page’s");
                WriteLiteral(@" performance.
            This score is determined by running
            <a href=""/web/tools/lighthouse"">Lighthouse</a>
            to collect and
            analyze
            <a href=""#lab"">lab data</a>
            about the page. A score of 90 or above is considered good.
            50 to 90 is a score that needs improvement, and below 50 is considered poor.

        </p>
        <h2 id=""crux"" data-text=""Real-World Field Data"" tabindex=""0"">Real-World Field Data</h2>

        <p>

            When PSI is given a URL, it will look it up in the
            <a href=""/web/tools/chrome-user-experience-report"">
                Chrome User Experience
                Report
            </a>
            (CrUX) dataset. If available, PSI reports the
            <a href=""https://web.dev/fcp/"">
                First
                Contentful Paint
            </a>
            (FCP),
            <a href=""https://web.dev/fid/"">First Input Delay</a>
            (FID),

            <a href=");
                WriteLiteral(@"https://web.dev/lcp />Largest Contentful Paint</a>
            (LCP), and
            <a href=https://web.dev/cls />Cumulative Layout
            Shift</a>
            (CLS) metric data for the origin and potentially the specific page URL.

        </p>
        <h2 id=""categories"" data-text=""Classifying Good, Needs Improvement, Poor"" tabindex=""0"">Classifying Good, Needs Improvement, Poor</h2>
        <p>
            PSI also classifies field data into 3 buckets, describing experiences deemed good, needs
            improvement, or poor. PSI sets the following thresholds for good / needs improvement / poor,
            based on our analysis of the CrUX dataset:
        </p>

        <table class=""table table-success"">
            <thead>
                <tr>
                    <th>
                        </
                    <th>
                    <th scope=""col"">Good</th>
                    <th scope=""col"">Needs Improvement</th>
                    <th scope=""col"">Poor</th>
     ");
                WriteLiteral(@"           </tr>
            </thead>
            <tbody>
                <tr class=""table-dark"">
                    <td>FCP</td>
                    <td>[0, 1000ms]</td>
                    <td>(1000ms, 3000ms]</td>
                    <td>over 3000ms</td>
                </tr>
                <tr class=""table-dark"">
                    <td>FID</td>
                    <td>[0, 100ms]</td>
                    <td>(100ms, 300ms]</td>
                    <td>over 300ms</td>
                </tr>
                <tr class=""table-dark"">
                    <td>LCP</td>
                    <td>[0, 2500ms]</td>
                    <td>(2500ms, 4000ms]</td>
                    <td>over 4000ms</td>
                </tr>
                <tr class=""table-dark"">
                    <td>CLS</td>
                    <td>[0, 0.1]</td>
                    <td>(0.1, 0.25]</td>
                    <td>over 0.25</td>
                </tr>
            </tbody>
        </table>
        <h3 id=""distr");
                WriteLiteral(@"ibution"" data-text=""Distribution and selected metric values"" tabindex=""0"">Distribution and selected metric values</h3>
        <p>
            PSI presents a distribution of these metrics so that developers can understand the
            range of FCP, FID, LCP, and CLS values for that page or origin. This distribution is also
            split into three categories: Good, Needs Improvement, and Poor, denoted with green, orange,
            and red bars. For example, seeing 14% within FCP's orange bar indicates that 14% of all
            observed FCP values fall between 1000ms and 3000ms. This data represents an aggregate view
            of all page loads over the previous 28-day collection period.
        </p>


        <p>

            Above the distribution bars, PSI reports the 75th percentile for all metrics.
            The 75th percentile is
            <a href=""#faq"">selected</a>
            so that developers can understand the
            most frustrating user experiences on their ");
                WriteLiteral(@"site. These field metric values are classified
            as good/needs improvement/poor by applying the same thresholds shown above.

        </p>
        <h3 id=""field-data-label"" data-text=""Core Web Vitals"" tabindex=""0"">Core Web Vitals</h3>

        <p>
            <img src=""/speed/docs/insights/images/v5/blueribbon.svg""");
                BeginWriteAttribute("alt", " alt=\"", 6182, "\"", 6188, 0);
                EndWriteAttribute();
                WriteLiteral(@" style=""vertical-align: text-top;"">
            <a href=""https://web.dev/vitals/"">Core Web Vitals</a>
            are a common set of signals critical to all web
            experiences. The Core Web Vitals metrics are FID, LCP, and CLS, with their respective
            thresholds. A page passes the Core Web Vitals assessment if the 75th percentiles of
            all three metrics are Good. Otherwise, the page does not pass the assessment.

        </p>
        <h3 id=""differences"" data-text=""Differences between Field Data in PSI and CrUX"" tabindex=""0"">Differences between Field Data in PSI and CrUX</h3>
        <p>
            The difference between the field data in PSI versus the Chrome User Experience Report on
            BigQuery, is that PSI’s data is updated daily for the trailing 28-day period. The data set on
            BigQuery is only updated monthly.
        </p>
        <h2 id=""lab"" data-text=""Lab data"" tabindex=""0"">Lab data</h2>

        <p>

            PSI uses Lighthouse ");
                WriteLiteral(@"to analyze the given URL, generating a performance score that estimates
            the page's performance on different metrics, including:
            <a href=""https://web.dev/fcp/"">
                First Contentful
                Paint
            </a>
            ,
            <a href=""https://web.dev/lcp/"">Largest Contentful Paint</a>
            ,
            <a href=""https://web.dev/speed-index/"">
                Speed
                Index
            </a>
            ,
            <a href=""https://web.dev/cls/"">Cumulative Layout Shift</a>
            ,
            <a href=""https://web.dev/interactive/"">
                Time to
                Interactive
            </a>
            , and
            <a href=""https://web.dev/tbt/"">Total Blocking Time</a>
            .

        </p>

        <p>
            Each metric is
            <a href=""https://web.dev/performance-scoring/"">scored</a>
            and labeled with a icon:
        </p>
        <ul>
            <li>G");
                WriteLiteral(@"ood is indicated with a green check mark</li>
            <li>Needs Improvement is indicated with orange informational circle</li>
            <li>Poor is indicated with a red warning triangle</li>
        </ul>
        <h2 id=""audits"" data-text=""Audits"" tabindex=""0"">Audits</h2>
        <p>Lighthouse separates its audits into three sections:</p>
        <ul>
            <li>
                <b>Opportunities</b>
                provide suggestions how to improve the page’s performance metrics.
                Each suggestion in this section estimates how much faster the page will load if the
                improvement is implemented.

            </li>
            <li>
                <b>Diagnostics</b>
                provide additional information about how a page adheres to best
                practices for web development.

            </li>
            <li>
                <b>Passed Audits</b>
                indicates the audits that have been passed by the page.

            </");
                WriteLiteral(@"li>
        </ul>
        <h2 id=""faq"" data-text=""Frequently asked questions (FAQs)"" tabindex=""0"">Frequently asked questions (FAQs)</h2>
        <p>
            <b>What device and network conditions does Lighthouse use to simulate a page load?</b>
        </p>

        <p>

            Currently, Lighthouse simulates a page load on a mid-tier device (Moto G4) on a

            <a class=""external"" href=""https://github.com/GoogleChrome/lighthouse/blob/master/docs/throttling.md"">mobile network</a>
            .

        </p>
        <p>
            <b>
                Why do the field data and lab data sometimes contradict each other?
            </b>
        </p>
        <p>
            The field data is a historical report about how a particular URL has performed, and represents
            anonymized performance data from users in the real-world on a variety of devices and network
            conditions. The lab data is based on a simulated load of a page on a single device and fixed
 ");
                WriteLiteral(@"           set of network conditions. As a result, the values may differ.
        </p>
        <p>
            <b>
                Why is the 75th percentile chosen for all metrics?
            </b>
        </p>
        <p>
            Our goal is to make sure that pages work well for the majority of users. By focusing on 75th
            percentile values for our metrics, this ensures that pages provide a good user experience
            under the most difficult device and network conditions.
        </p>
        <p>
            <b>
                Why does the FCP in v4 and v5 have different values?
            </b>
        </p>

        FCP in v5 reports the 75th percentile (as of November 4th 2019), previously it was the 90th percentile.
        In v4, FCP reports the median (50th percentile).

        <p></p>
        <p>
            <b>
                Why does the FID in v5 have different values?
            </b>
        </p>

        FID reports the 75th percentile (as of Ma");
                WriteLiteral(@"y 27th 2020), previously it was the 95th percentile.

        <p></p>
        <p>
            <b>
                What is a good score for the lab data?
            </b>
        </p>
        <p>
            Any green score (90+) is considered good.
        </p>
        <p>
            <b>
                Why does the performance score change from run to run? I didn’t change anything on my page!
            </b>
        </p>
        <p>
            Variability in performance measurement is introduced via a number of channels with different
            levels of impact. Several common sources of metric variability are local network availability,
            client hardware availability, and client resource contention.
        </p>
        <p>
            <b>
                Why is the real-world Chrome User Experience Report speed data not available for a URL?
            </b>
        </p>

        <p>

            Chrome User Experience Report aggregates real-world speed data from");
                WriteLiteral(@"

            <a target=""_blank"" rel=""noopener"" href=""https://developers.google.com/web/tools/chrome-user-experience-report/#methodology"">opted-in users</a>
            and
            requires that a URL must be public
            (
            <a target=""_blank"" rel=""noopener"" href=""https://developers.google.com/web/tools/lighthouse/audits/indexing"">crawlable and indexable</a>
            )
            and have sufficient number of distinct samples that provide a representative, anonymized view
            of performance of the URL.

        </p>
        <p>
            <b>
                Why is the real-world Chrome User Experience Report speed data not available for an origin?
            </b>
        </p>
        <p>

            Chrome User Experience Report aggregates real-world speed data from

            <a target=""_blank"" rel=""noopener"" href=""https://developers.google.com/web/tools/chrome-user-experience-report/#methodology"">opted-in users</a>
            and
            requ");
                WriteLiteral(@"ires that an origin's root page must be public
            (
            <a target=""_blank"" rel=""noopener"" href=""https://developers.google.com/web/tools/lighthouse/audits/indexing"">crawlable and indexable</a>
            )
            and have sufficient number of distinct samples that provide a representative, anonymized view
            of origin’s performance across all URLs that are visited on that origin.

        </p>

    </header>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
